{"ast":null,"code":"import { BASE_PATH } from \"../utils/constants\";\nimport { authFetch } from \"../utils/fetch\";\nexport async function createAddressApi(address, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses`;\n    const params = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(address)\n    };\n    const result = await authFetch(url, params, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\nexport async function getAddressesApi(idUser, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses?user=${idUser}`;\n    const result = await authFetch(url, null, logout);\n    if (result.statusCode === 500) throw \"Error del servidor\";\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\nexport async function deleteAddressApi(idAddress, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses/${idAddress}`;\n    const params = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const result = await authFetch(url, params, logout);\n    if (result.statusCode === 500) throw \"Error del servidor\";\n    return true;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\nexport async function updateAddressApi(idAddress, address, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses/${idAddress}`;\n    const params = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(address)\n    };\n    const result = await authFetch(url, params, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}","map":{"version":3,"sources":["/home/ydalimir/Escritorio/client/api/address.js"],"names":["BASE_PATH","authFetch","createAddressApi","address","logout","url","params","method","headers","body","JSON","stringify","result","error","console","log","getAddressesApi","idUser","statusCode","deleteAddressApi","idAddress","updateAddressApi"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,OAAO,eAAeC,gBAAf,CAAgCC,OAAhC,EAAyCC,MAAzC,EAAiD;AACtD,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEL,SAAU,YAAzB;AACA,UAAMM,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AALO,KAAf;AAOA,UAAMS,MAAM,GAAG,MAAMX,SAAS,CAACI,GAAD,EAAMC,MAAN,EAAcF,MAAd,CAA9B;AACA,WAAOQ,MAAP;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF;AAED,OAAO,eAAeG,eAAf,CAA+BC,MAA/B,EAAuCb,MAAvC,EAA+C;AACpD,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEL,SAAU,mBAAkBiB,MAAO,EAAlD;AACA,UAAML,MAAM,GAAG,MAAMX,SAAS,CAACI,GAAD,EAAM,IAAN,EAAYD,MAAZ,CAA9B;AACA,QAAIQ,MAAM,CAACM,UAAP,KAAsB,GAA1B,EAA+B,MAAM,oBAAN;AAC/B,WAAON,MAAP;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF;AAED,OAAO,eAAeM,gBAAf,CAAgCC,SAAhC,EAA2ChB,MAA3C,EAAmD;AACxD,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEL,SAAU,cAAaoB,SAAU,EAAhD;AACA,UAAMd,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAE,QADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFI,KAAf;AAMA,UAAMI,MAAM,GAAG,MAAMX,SAAS,CAACI,GAAD,EAAMC,MAAN,EAAcF,MAAd,CAA9B;AACA,QAAIQ,MAAM,CAACM,UAAP,KAAsB,GAA1B,EAA+B,MAAM,oBAAN;AAC/B,WAAO,IAAP;AACD,GAXD,CAWE,OAAOL,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,KAAP;AACD;AACF;AAED,OAAO,eAAeQ,gBAAf,CAAgCD,SAAhC,EAA2CjB,OAA3C,EAAoDC,MAApD,EAA4D;AACjE,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEL,SAAU,cAAaoB,SAAU,EAAhD;AACA,UAAMd,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAE,KADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFI;AAKbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AALO,KAAf;AAOA,UAAMS,MAAM,GAAG,MAAMX,SAAS,CAACI,GAAD,EAAMC,MAAN,EAAcF,MAAd,CAA9B;AACA,WAAOQ,MAAP;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF","sourcesContent":["import { BASE_PATH } from \"../utils/constants\";\nimport { authFetch } from \"../utils/fetch\";\n\nexport async function createAddressApi(address, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses`;\n    const params = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(address),\n    };\n    const result = await authFetch(url, params, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function getAddressesApi(idUser, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses?user=${idUser}`;\n    const result = await authFetch(url, null, logout);\n    if (result.statusCode === 500) throw \"Error del servidor\";\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function deleteAddressApi(idAddress, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses/${idAddress}`;\n    const params = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const result = await authFetch(url, params, logout);\n    if (result.statusCode === 500) throw \"Error del servidor\";\n    return true;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\n\nexport async function updateAddressApi(idAddress, address, logout) {\n  try {\n    const url = `${BASE_PATH}/addresses/${idAddress}`;\n    const params = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(address),\n    };\n    const result = await authFetch(url, params, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}