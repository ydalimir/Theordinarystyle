{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { toast } from \"react-toastify\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { loginApi, resetPasswordApi } from \"../../../api/user\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginForm(props) {\n  var showRegisterForm = props.showRegisterForm,\n      onCloseModal = props.onCloseModal;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useAuth = useAuth(),\n      login = _useAuth.login;\n\n  var formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setLoading(true);\n                _context.next = 3;\n                return loginApi(formData);\n\n              case 3:\n                response = _context.sent;\n\n                if (response !== null && response !== void 0 && response.jwt) {\n                  login(response.jwt);\n                  onCloseModal();\n                } else {\n                  toast.error(\"El email o la contrase√±a son incorrectos\");\n                }\n\n                setLoading(false);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n\n  var resetPassword = function resetPassword() {\n    formik.setErrors({});\n    var validateEmail = Yup.string().email().required();\n\n    if (!validateEmail.isValidSync(formik.values.identifier)) {\n      formik.setErrors({\n        identifier: true\n      });\n    } else {\n      resetPasswordApi(formik.values.identifier);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Form, {\n    className: \"login-form\",\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsx(Form.Input, {\n      name: \"identifier\",\n      type: \"text\",\n      placeholder: \"Correo electronico\",\n      onChange: formik.handleChange,\n      error: formik.errors.identifier\n    }), /*#__PURE__*/_jsx(Form.Input, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: \"Contrase\\xF1a\",\n      onChange: formik.handleChange,\n      error: formik.errors.password\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsx(Button, {\n        type: \"button\",\n        basic: true,\n        onClick: showRegisterForm,\n        children: \"Registrarse\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(Button, {\n          className: \"submit\",\n          type: \"submit\",\n          loading: loading,\n          children: \"Entrar\"\n        }), /*#__PURE__*/_jsx(Button, {\n          type: \"button\",\n          onClick: resetPassword,\n          children: \"\\xBFHas olvidado la contrase\\xF1a?\"\n        })]\n      })]\n    })]\n  });\n}\n\nfunction initialValues() {\n  return {\n    identifier: \"\",\n    password: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    identifier: Yup.string().email(true).required(true),\n    password: Yup.string().required(true)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}