{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { toast } from \"react-toastify\";\nimport { size, includes, remove } from \"lodash\";\nimport { BASE_PATH, CART } from \"../utils/constants\";\nimport { authFetch } from \"../utils/fetch\";\nexport function getProductsCart() {\n  var cart = localStorage.getItem(CART);\n\n  if (!cart) {\n    return null;\n  } else {\n    var products = cart.split(\",\");\n    return products;\n  }\n}\nexport function addProductCart(product) {\n  var cart = getProductsCart();\n\n  if (!cart) {\n    localStorage.setItem(CART, product);\n    toast.success(\"Producto añadido al carrito\");\n  } else {\n    var productFound = includes(cart, product);\n\n    if (productFound) {\n      toast.warning(\"Este producto ya esta en el carrito\");\n    } else {\n      cart.push(product);\n      localStorage.setItem(CART, cart);\n      toast.success(\"Producto añadido correctamente\");\n    }\n  }\n}\nexport function countProductsCart() {\n  var cart = getProductsCart();\n\n  if (!cart) {\n    return 0;\n  } else {\n    return size(cart);\n  }\n}\nexport function removeProductCart(product) {\n  var cart = getProductsCart();\n  remove(cart, function (item) {\n    return item === product;\n  });\n\n  if (size(cart) > 0) {\n    localStorage.setItem(CART, cart);\n  } else {\n    localStorage.removeItem(CART);\n  }\n}\nexport function paymentCartApi(_x, _x2, _x3, _x4, _x5) {\n  return _paymentCartApi.apply(this, arguments);\n}\n\nfunction _paymentCartApi() {\n  _paymentCartApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, products, idUser, address, logout) {\n    var addressShipping, url, params, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            addressShipping = address;\n            delete addressShipping.user;\n            delete addressShipping.createdAt;\n            url = \"\".concat(BASE_PATH, \"/orders\");\n            params = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                token: token,\n                products: products,\n                idUser: idUser,\n                addressShipping: addressShipping\n              })\n            };\n            _context.next = 8;\n            return authFetch(url, params, logout);\n\n          case 8:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", null);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _paymentCartApi.apply(this, arguments);\n}\n\nexport function removeAllProductsCart() {\n  localStorage.removeItem(CART);\n}","map":null,"metadata":{},"sourceType":"module"}