{"ast":null,"code":"import { BASE_PATH } from \"../utils/constants\";\nimport { authFetch } from \"../utils/fetch\";\nimport { size } from \"lodash\";\nexport async function isFavoriteApi(idUser, idGame, logout) {\n  try {\n    const url = `${BASE_PATH}/favorites?user=${idUser}&game=${idGame}`;\n    return await authFetch(url, null, logout);\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\nexport async function addFavoriteApi(idUser, idGame, logout) {\n  try {\n    const dataFound = await isFavoriteApi(idUser, idGame, logout);\n\n    if (size(dataFound) > 0 || !dataFound) {\n      return \"Este juego ya lo tienes en tu lista de favoritos\";\n    } else {\n      const url = `${BASE_PATH}/favorites`;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user: idUser,\n          game: idGame\n        })\n      };\n      const result = await authFetch(url, params, logout);\n      return result;\n    }\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\nexport async function deleteFavoriteApi(idUser, idGame, logout) {\n  try {\n    const dataFound = await isFavoriteApi(idUser, idGame, logout);\n\n    if (size(dataFound) > 0) {\n      var _dataFound$;\n\n      const url = `${BASE_PATH}/favorites/${(_dataFound$ = dataFound[0]) === null || _dataFound$ === void 0 ? void 0 : _dataFound$._id}`;\n      const params = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const result = authFetch(url, params, logout);\n      return result;\n    }\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\nexport async function getFavoriteApi(idUser, logout) {\n  try {\n    const url = `${BASE_PATH}/favorites?user=${idUser}`;\n    const result = await authFetch(url, null, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}","map":{"version":3,"sources":["/home/ydalimir/Escritorio/client/api/favorite.js"],"names":["BASE_PATH","authFetch","size","isFavoriteApi","idUser","idGame","logout","url","error","console","log","addFavoriteApi","dataFound","params","method","headers","body","JSON","stringify","user","game","result","deleteFavoriteApi","_id","getFavoriteApi"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,OAAO,eAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,MAA7C,EAAqD;AAC1D,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEP,SAAU,mBAAkBI,MAAO,SAAQC,MAAO,EAAjE;AACA,WAAO,MAAMJ,SAAS,CAACM,GAAD,EAAM,IAAN,EAAYD,MAAZ,CAAtB;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF;AAED,OAAO,eAAeG,cAAf,CAA8BP,MAA9B,EAAsCC,MAAtC,EAA8CC,MAA9C,EAAsD;AAC3D,MAAI;AACF,UAAMM,SAAS,GAAG,MAAMT,aAAa,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAArC;;AACA,QAAIJ,IAAI,CAACU,SAAD,CAAJ,GAAkB,CAAlB,IAAuB,CAACA,SAA5B,EAAuC;AACrC,aAAO,kDAAP;AACD,KAFD,MAEO;AACL,YAAML,GAAG,GAAI,GAAEP,SAAU,YAAzB;AACA,YAAMa,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE,MADK;AAEbC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFI;AAKbC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,IAAI,EAAEf,MAAR;AAAgBgB,UAAAA,IAAI,EAAEf;AAAtB,SAAf;AALO,OAAf;AAOA,YAAMgB,MAAM,GAAG,MAAMpB,SAAS,CAACM,GAAD,EAAMM,MAAN,EAAcP,MAAd,CAA9B;AACA,aAAOe,MAAP;AACD;AACF,GAhBD,CAgBE,OAAOb,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF;AAED,OAAO,eAAec,iBAAf,CAAiClB,MAAjC,EAAyCC,MAAzC,EAAiDC,MAAjD,EAAyD;AAC9D,MAAI;AACF,UAAMM,SAAS,GAAG,MAAMT,aAAa,CAACC,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAArC;;AACA,QAAIJ,IAAI,CAACU,SAAD,CAAJ,GAAkB,CAAtB,EAAyB;AAAA;;AACvB,YAAML,GAAG,GAAI,GAAEP,SAAU,cAAb,eAA0BY,SAAS,CAAC,CAAD,CAAnC,gDAA0B,YAAcW,GAAI,EAAxD;AACA,YAAMV,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAE,QADK;AAEbC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAFI,OAAf;AAMA,YAAMM,MAAM,GAAGpB,SAAS,CAACM,GAAD,EAAMM,MAAN,EAAcP,MAAd,CAAxB;AACA,aAAOe,MAAP;AACD;AACF,GAbD,CAaE,OAAOb,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF;AAED,OAAO,eAAegB,cAAf,CAA8BpB,MAA9B,EAAsCE,MAAtC,EAA8C;AACnD,MAAI;AACF,UAAMC,GAAG,GAAI,GAAEP,SAAU,mBAAkBI,MAAO,EAAlD;AACA,UAAMiB,MAAM,GAAG,MAAMpB,SAAS,CAACM,GAAD,EAAM,IAAN,EAAYD,MAAZ,CAA9B;AACA,WAAOe,MAAP;AACD,GAJD,CAIE,OAAOb,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO,IAAP;AACD;AACF","sourcesContent":["import { BASE_PATH } from \"../utils/constants\";\nimport { authFetch } from \"../utils/fetch\";\nimport { size } from \"lodash\";\n\nexport async function isFavoriteApi(idUser, idGame, logout) {\n  try {\n    const url = `${BASE_PATH}/favorites?user=${idUser}&game=${idGame}`;\n    return await authFetch(url, null, logout);\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function addFavoriteApi(idUser, idGame, logout) {\n  try {\n    const dataFound = await isFavoriteApi(idUser, idGame, logout);\n    if (size(dataFound) > 0 || !dataFound) {\n      return \"Este juego ya lo tienes en tu lista de favoritos\";\n    } else {\n      const url = `${BASE_PATH}/favorites`;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ user: idUser, game: idGame }),\n      };\n      const result = await authFetch(url, params, logout);\n      return result;\n    }\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function deleteFavoriteApi(idUser, idGame, logout) {\n  try {\n    const dataFound = await isFavoriteApi(idUser, idGame, logout);\n    if (size(dataFound) > 0) {\n      const url = `${BASE_PATH}/favorites/${dataFound[0]?._id}`;\n      const params = {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n      const result = authFetch(url, params, logout);\n      return result;\n    }\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n\nexport async function getFavoriteApi(idUser, logout) {\n  try {\n    const url = `${BASE_PATH}/favorites?user=${idUser}`;\n    const result = await authFetch(url, null, logout);\n    return result;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}