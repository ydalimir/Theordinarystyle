{"ast":null,"code":"var _jsxFileName = \"/home/ydalimir/Escritorio/client/components/Account/AddressForm/AddressForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { createAddressApi, updateAddressApi } from \"../../../api/address\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddressForm(props) {\n  const {\n    setShowModal,\n    setReloadAddreses,\n    newAddress,\n    address\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    auth,\n    logout\n  } = useAuth();\n  const formik = useFormik({\n    initialValues: initialValues(address),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: formData => {\n      newAddress ? createAddress(formData) : updateAddress(formData);\n    }\n  });\n\n  const createAddress = async formData => {\n    setLoading(true);\n\n    const formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n      user: auth.idUser\n    });\n\n    const response = await createAddressApi(formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al crear la dirección\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAddreses(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  const updateAddress = formData => {\n    setLoading(true);\n\n    const formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n      user: auth.idUser\n    });\n\n    const response = updateAddressApi(address._id, formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al actualizar la direccion\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAddreses(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n      name: \"title\",\n      type: \"text\",\n      label: \"Titulo de la direcci\\xF3n\",\n      placeholder: \"Titulo de la direcci\\xF3n\",\n      onChange: formik.handleChange,\n      value: formik.values.title,\n      error: formik.errors.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"name\",\n        type: \"text\",\n        label: \"Nombre y apeliidos\",\n        placeholder: \"Nombre y apellidos\",\n        onChange: formik.handleChange,\n        value: formik.values.name,\n        error: formik.errors.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"address\",\n        type: \"text\",\n        label: \"Direcci\\xF3n\",\n        placeholder: \"Direcci\\xF3n\",\n        onChange: formik.handleChange,\n        value: formik.values.address,\n        error: formik.errors.address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"city\",\n        type: \"text\",\n        label: \"Ciudad\",\n        placeholder: \"Ciudad\",\n        onChange: formik.handleChange,\n        value: formik.values.city,\n        error: formik.errors.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"state\",\n        type: \"text\",\n        label: \"Estado/Provincia/Regi\\xF3n\",\n        placeholder: \"Estado/Provincia/Regi\\xF3n\",\n        onChange: formik.handleChange,\n        value: formik.values.state,\n        error: formik.errors.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"postalCode\",\n        type: \"text\",\n        label: \"C\\xF3digo postal\",\n        placeholder: \"C\\xF3digo postal\",\n        onChange: formik.handleChange,\n        value: formik.values.postalCode,\n        error: formik.errors.postalCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        name: \"phone\",\n        type: \"text\",\n        label: \"N\\xFAmero de tel\\xE9fono\",\n        placeholder: \"N\\xFAmero de tel\\xE9fono\",\n        onChange: formik.handleChange,\n        value: formik.values.phone,\n        error: formik.errors.phone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit\",\n        type: \"submit\",\n        loading: loading,\n        children: newAddress ? \"Crear dirección\" : \"Actualizar dirección\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\nfunction initialValues(address) {\n  return {\n    title: (address === null || address === void 0 ? void 0 : address.title) || \"\",\n    name: (address === null || address === void 0 ? void 0 : address.name) || \"\",\n    address: (address === null || address === void 0 ? void 0 : address.address) || \"\",\n    city: (address === null || address === void 0 ? void 0 : address.city) || \"\",\n    state: (address === null || address === void 0 ? void 0 : address.state) || \"\",\n    postalCode: (address === null || address === void 0 ? void 0 : address.postalCode) || \"\",\n    phone: (address === null || address === void 0 ? void 0 : address.phone) || \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    title: Yup.string().required(true),\n    name: Yup.string().required(true),\n    address: Yup.string().required(true),\n    city: Yup.string().required(true),\n    state: Yup.string().required(true),\n    postalCode: Yup.string().required(true),\n    phone: Yup.string().required(true)\n  };\n}","map":{"version":3,"sources":["/home/ydalimir/Escritorio/client/components/Account/AddressForm/AddressForm.js"],"names":["React","useState","Form","Button","useFormik","Yup","useAuth","createAddressApi","updateAddressApi","toast","AddressForm","props","setShowModal","setReloadAddreses","newAddress","address","loading","setLoading","auth","logout","formik","initialValues","validationSchema","object","onSubmit","formData","createAddress","updateAddress","formDataTemp","user","idUser","response","warning","resetForm","_id","handleSubmit","handleChange","values","title","errors","name","city","state","postalCode","phone","string","required"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { createAddressApi, updateAddressApi } from \"../../../api/address\";\nimport { toast } from \"react-toastify\";\n\nexport default function AddressForm(props) {\n  const { setShowModal, setReloadAddreses, newAddress, address } = props;\n  const [loading, setLoading] = useState(false);\n  const { auth, logout } = useAuth();\n\n  const formik = useFormik({\n    initialValues: initialValues(address),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: (formData) => {\n      newAddress ? createAddress(formData) : updateAddress(formData);\n    },\n  });\n\n  const createAddress = async (formData) => {\n    setLoading(true);\n    const formDataTemp = {\n      ...formData,\n      user: auth.idUser,\n    };\n    const response = await createAddressApi(formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al crear la dirección\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAddreses(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  const updateAddress = (formData) => {\n    setLoading(true);\n    const formDataTemp = {\n      ...formData,\n      user: auth.idUser,\n    };\n    const response = updateAddressApi(address._id, formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al actualizar la direccion\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAddreses(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Form.Input\n        name=\"title\"\n        type=\"text\"\n        label=\"Titulo de la dirección\"\n        placeholder=\"Titulo de la dirección\"\n        onChange={formik.handleChange}\n        value={formik.values.title}\n        error={formik.errors.title}\n      />\n\n      <Form.Group widths=\"equal\">\n        <Form.Input\n          name=\"name\"\n          type=\"text\"\n          label=\"Nombre y apeliidos\"\n          placeholder=\"Nombre y apellidos\"\n          onChange={formik.handleChange}\n          value={formik.values.name}\n          error={formik.errors.name}\n        />\n        <Form.Input\n          name=\"address\"\n          type=\"text\"\n          label=\"Dirección\"\n          placeholder=\"Dirección\"\n          onChange={formik.handleChange}\n          value={formik.values.address}\n          error={formik.errors.address}\n        />\n      </Form.Group>\n      <Form.Group widths=\"equal\">\n        <Form.Input\n          name=\"city\"\n          type=\"text\"\n          label=\"Ciudad\"\n          placeholder=\"Ciudad\"\n          onChange={formik.handleChange}\n          value={formik.values.city}\n          error={formik.errors.city}\n        />\n        <Form.Input\n          name=\"state\"\n          type=\"text\"\n          label=\"Estado/Provincia/Región\"\n          placeholder=\"Estado/Provincia/Región\"\n          onChange={formik.handleChange}\n          value={formik.values.state}\n          error={formik.errors.state}\n        />\n      </Form.Group>\n      <Form.Group widths=\"equal\">\n        <Form.Input\n          name=\"postalCode\"\n          type=\"text\"\n          label=\"Código postal\"\n          placeholder=\"Código postal\"\n          onChange={formik.handleChange}\n          value={formik.values.postalCode}\n          error={formik.errors.postalCode}\n        />\n        <Form.Input\n          name=\"phone\"\n          type=\"text\"\n          label=\"Número de teléfono\"\n          placeholder=\"Número de teléfono\"\n          onChange={formik.handleChange}\n          value={formik.values.phone}\n          error={formik.errors.phone}\n        />\n      </Form.Group>\n      <div className=\"actions\">\n        <Button className=\"submit\" type=\"submit\" loading={loading}>\n          {newAddress ? \"Crear dirección\" : \"Actualizar dirección\"}\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nfunction initialValues(address) {\n  return {\n    title: address?.title || \"\",\n    name: address?.name || \"\",\n    address: address?.address || \"\",\n    city: address?.city || \"\",\n    state: address?.state || \"\",\n    postalCode: address?.postalCode || \"\",\n    phone: address?.phone || \"\",\n  };\n}\n\nfunction validationSchema() {\n  return {\n    title: Yup.string().required(true),\n    name: Yup.string().required(true),\n    address: Yup.string().required(true),\n    city: Yup.string().required(true),\n    state: Yup.string().required(true),\n    postalCode: Yup.string().required(true),\n    phone: Yup.string().required(true),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}