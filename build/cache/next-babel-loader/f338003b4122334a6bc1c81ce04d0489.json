{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/ydalimir/Escritorio/client/components/Game/CarouselScreenshots/CarouselScreenshots.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Image, Modal } from \"semantic-ui-react\";\nimport Slider from \"react-slick\";\nimport { map } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar settings = {\n  className: \"carousel-screenshots\",\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 5,\n  swipeToSlider: true\n};\nexport default function CarouselScreenshots(props) {\n  _s();\n\n  var _this = this;\n\n  var title = props.title,\n      screenshots = props.screenshots;\n\n  var _useState = useState(false),\n      showModal = _useState[0],\n      setShowModal = _useState[1];\n\n  var _useState2 = useState(null),\n      urlImage = _useState2[0],\n      setUrlImage = _useState2[1];\n\n  var openImagen = function openImagen(url) {\n    setUrlImage(url);\n    setShowModal(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Slider, _objectSpread(_objectSpread({}, settings), {}, {\n      children: map(screenshots, function (screenshot) {\n        return /*#__PURE__*/_jsxDEV(Image, {\n          src: screenshot.url,\n          alt: screenshot.name,\n          onClick: function onClick() {\n            return openImagen(screenshot.url);\n          }\n        }, screenshot.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: showModal,\n      onClose: function onClose() {\n        return setShowModal(false);\n      },\n      size: \"large\",\n      children: /*#__PURE__*/_jsxDEV(Image, {\n        src: urlImage,\n        alt: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CarouselScreenshots, \"S8xy7z2Lo5xLOe9DS1f3sNG6jWI=\");\n\n_c = CarouselScreenshots;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselScreenshots\");","map":{"version":3,"sources":["/home/ydalimir/Escritorio/client/components/Game/CarouselScreenshots/CarouselScreenshots.js"],"names":["React","useState","Image","Modal","Slider","map","settings","className","dots","infinite","speed","slidesToShow","swipeToSlider","CarouselScreenshots","props","title","screenshots","showModal","setShowModal","urlImage","setUrlImage","openImagen","url","screenshot","name","id"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAT,QAAoB,QAApB;;;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,SAAS,EAAE,sBADI;AAEfC,EAAAA,IAAI,EAAE,KAFS;AAGfC,EAAAA,QAAQ,EAAE,IAHK;AAIfC,EAAAA,KAAK,EAAE,GAJQ;AAKfC,EAAAA,YAAY,EAAE,CALC;AAMfC,EAAAA,aAAa,EAAE;AANA,CAAjB;AASA,eAAe,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAAA;;AACjD,MAAQC,KAAR,GAA+BD,KAA/B,CAAQC,KAAR;AAAA,MAAeC,WAAf,GAA+BF,KAA/B,CAAeE,WAAf;;AACA,kBAAkCf,QAAQ,CAAC,KAAD,CAA1C;AAAA,MAAOgB,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAgCjB,QAAQ,CAAC,IAAD,CAAxC;AAAA,MAAOkB,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1BF,IAAAA,WAAW,CAACE,GAAD,CAAX;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAHD;;AAKA,sBACE;AAAA,4BACE,QAAC,MAAD,kCAAYZ,QAAZ;AAAA,gBACGD,GAAG,CAACW,WAAD,EAAc,UAACO,UAAD;AAAA,4BAChB,QAAC,KAAD;AAEE,UAAA,GAAG,EAAEA,UAAU,CAACD,GAFlB;AAGE,UAAA,GAAG,EAAEC,UAAU,CAACC,IAHlB;AAIE,UAAA,OAAO,EAAE;AAAA,mBAAMH,UAAU,CAACE,UAAU,CAACD,GAAZ,CAAhB;AAAA;AAJX,WACOC,UAAU,CAACE,EADlB;AAAA;AAAA;AAAA;AAAA,iBADgB;AAAA,OAAd;AADN;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAER,SAAb;AAAwB,MAAA,OAAO,EAAE;AAAA,eAAMC,YAAY,CAAC,KAAD,CAAlB;AAAA,OAAjC;AAA4D,MAAA,IAAI,EAAC,OAAjE;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,GAAG,EAAEC,QAAZ;AAAsB,QAAA,GAAG,EAAEJ;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAiBD;;GA3BuBF,mB;;KAAAA,mB","sourcesContent":["import React, { useState } from \"react\";\nimport { Image, Modal } from \"semantic-ui-react\";\nimport Slider from \"react-slick\";\nimport { map } from \"lodash\";\n\nconst settings = {\n  className: \"carousel-screenshots\",\n  dots: false,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 5,\n  swipeToSlider: true,\n};\n\nexport default function CarouselScreenshots(props) {\n  const { title, screenshots } = props;\n  const [showModal, setShowModal] = useState(false);\n  const [urlImage, setUrlImage] = useState(null);\n\n  const openImagen = (url) => {\n    setUrlImage(url);\n    setShowModal(true);\n  };\n\n  return (\n    <>\n      <Slider {...settings}>\n        {map(screenshots, (screenshot) => (\n          <Image\n            key={screenshot.id}\n            src={screenshot.url}\n            alt={screenshot.name}\n            onClick={() => openImagen(screenshot.url)}\n          />\n        ))}\n      </Slider>\n      <Modal open={showModal} onClose={() => setShowModal(false)} size=\"large\">\n        <Image src={urlImage} alt={title} />\n      </Modal>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}