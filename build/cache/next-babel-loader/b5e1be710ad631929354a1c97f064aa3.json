{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport useAuth from \"../../../hooks/useAuth\";\nimport { createAddressApi, updateAddressApi } from \"../../../api/address\";\nimport { toast } from \"react-toastify\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AddressForm(props) {\n  var setShowModal = props.setShowModal,\n      setReloadAddreses = props.setReloadAddreses,\n      newAddress = props.newAddress,\n      address = props.address;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useAuth = useAuth(),\n      auth = _useAuth.auth,\n      logout = _useAuth.logout;\n\n  var formik = useFormik({\n    initialValues: initialValues(address),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: function onSubmit(formData) {\n      newAddress ? createAddress(formData) : updateAddress(formData);\n    }\n  });\n\n  var createAddress = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData) {\n      var formDataTemp, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n                user: auth.idUser\n              });\n              _context.next = 4;\n              return createAddressApi(formDataTemp, logout);\n\n            case 4:\n              response = _context.sent;\n\n              if (!response) {\n                toast.warning(\"Error al crear la dirección\");\n                setLoading(false);\n              } else {\n                formik.resetForm();\n                setReloadAddreses(true);\n                setLoading(false);\n                setShowModal(false);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function createAddress(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var updateAddress = function updateAddress(formData) {\n    setLoading(true);\n\n    var formDataTemp = _objectSpread(_objectSpread({}, formData), {}, {\n      user: auth.idUser\n    });\n\n    var response = updateAddressApi(address._id, formDataTemp, logout);\n\n    if (!response) {\n      toast.warning(\"Error al actualizar la direccion\");\n      setLoading(false);\n    } else {\n      formik.resetForm();\n      setReloadAddreses(true);\n      setLoading(false);\n      setShowModal(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Form, {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsx(Form.Input, {\n      name: \"title\",\n      type: \"text\",\n      label: \"Titulo de la direcci\\xF3n\",\n      placeholder: \"Titulo de la direcci\\xF3n\",\n      onChange: formik.handleChange,\n      value: formik.values.title,\n      error: formik.errors.title\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"name\",\n        type: \"text\",\n        label: \"Nombre y apeliidos\",\n        placeholder: \"Nombre y apellidos\",\n        onChange: formik.handleChange,\n        value: formik.values.name,\n        error: formik.errors.name\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"address\",\n        type: \"text\",\n        label: \"Direcci\\xF3n\",\n        placeholder: \"Direcci\\xF3n\",\n        onChange: formik.handleChange,\n        value: formik.values.address,\n        error: formik.errors.address\n      })]\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"city\",\n        type: \"text\",\n        label: \"Ciudad\",\n        placeholder: \"Ciudad\",\n        onChange: formik.handleChange,\n        value: formik.values.city,\n        error: formik.errors.city\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"state\",\n        type: \"text\",\n        label: \"Estado/Provincia/Regi\\xF3n\",\n        placeholder: \"Estado/Provincia/Regi\\xF3n\",\n        onChange: formik.handleChange,\n        value: formik.values.state,\n        error: formik.errors.state\n      })]\n    }), /*#__PURE__*/_jsxs(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsx(Form.Input, {\n        name: \"postalCode\",\n        type: \"text\",\n        label: \"C\\xF3digo postal\",\n        placeholder: \"C\\xF3digo postal\",\n        onChange: formik.handleChange,\n        value: formik.values.postalCode,\n        error: formik.errors.postalCode\n      }), /*#__PURE__*/_jsx(Form.Input, {\n        name: \"phone\",\n        type: \"text\",\n        label: \"N\\xFAmero de tel\\xE9fono\",\n        placeholder: \"N\\xFAmero de tel\\xE9fono\",\n        onChange: formik.handleChange,\n        value: formik.values.phone,\n        error: formik.errors.phone\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"actions\",\n      children: /*#__PURE__*/_jsx(Button, {\n        className: \"submit\",\n        type: \"submit\",\n        loading: loading,\n        children: newAddress ? \"Crear dirección\" : \"Actualizar dirección\"\n      })\n    })]\n  });\n}\n\nfunction initialValues(address) {\n  return {\n    title: (address === null || address === void 0 ? void 0 : address.title) || \"\",\n    name: (address === null || address === void 0 ? void 0 : address.name) || \"\",\n    address: (address === null || address === void 0 ? void 0 : address.address) || \"\",\n    city: (address === null || address === void 0 ? void 0 : address.city) || \"\",\n    state: (address === null || address === void 0 ? void 0 : address.state) || \"\",\n    postalCode: (address === null || address === void 0 ? void 0 : address.postalCode) || \"\",\n    phone: (address === null || address === void 0 ? void 0 : address.phone) || \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    title: Yup.string().required(true),\n    name: Yup.string().required(true),\n    address: Yup.string().required(true),\n    city: Yup.string().required(true),\n    state: Yup.string().required(true),\n    postalCode: Yup.string().required(true),\n    phone: Yup.string().required(true)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}