{"ast":null,"code":"var _jsxFileName = \"/home/ydalimir/Escritorio/client/components/Account/ChangeEmailForm/ChangeEmailForm.js\";\nimport React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { toast } from \"react-toastify\";\nimport { updateEmailApi } from \"../../../api/user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChangeEmailForm(props) {\n  const {\n    user,\n    logout,\n    setReloadUser\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async formData => {\n      setLoading(true);\n      const response = await updateEmailApi(user.id, formData.email, logout);\n\n      if (!response || (response === null || response === void 0 ? void 0 : response.statusCode) === 400) {\n        toast.error(\"Error al actualizar el email\");\n      } else {\n        setReloadUser(true);\n        toast.success(\"Email acutalizado\");\n        formik.handleReset();\n      }\n\n      setLoading(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"change-email-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Cambia tu e-mail \", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"(Tu e-mail actual: \", user.email, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"email\",\n          placeholder: \"Tu nuevo e-mail\",\n          onChange: formik.handleChange,\n          value: formik.values.email,\n          error: formik.errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          name: \"repeatEmail\",\n          placeholder: \"Confirma tu nuevo e-mail\",\n          onChange: formik.handleChange,\n          value: formik.values.repeatEmail,\n          error: formik.errors.repeatEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit\",\n        loading: loading,\n        children: \"Actualizar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\nfunction initialValues() {\n  return {\n    email: \"\",\n    repeatEmail: \"\"\n  };\n}\n\nfunction validationSchema() {\n  return {\n    email: Yup.string().email(true).required(true).oneOf([Yup.ref(\"repeatEmail\")], true),\n    repeatEmail: Yup.string().email(true).required(true).oneOf([Yup.ref(\"email\")], true)\n  };\n}","map":{"version":3,"sources":["/home/ydalimir/Escritorio/client/components/Account/ChangeEmailForm/ChangeEmailForm.js"],"names":["React","useState","Form","Button","useFormik","Yup","toast","updateEmailApi","ChangeEmailForm","props","user","logout","setReloadUser","loading","setLoading","formik","initialValues","validationSchema","object","onSubmit","formData","response","id","email","statusCode","error","success","handleReset","handleSubmit","handleChange","values","errors","repeatEmail","string","required","oneOf","ref"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { toast } from \"react-toastify\";\nimport { updateEmailApi } from \"../../../api/user\";\n\nexport default function ChangeEmailForm(props) {\n  const { user, logout, setReloadUser } = props;\n  const [loading, setLoading] = useState(false);\n\n  const formik = useFormik({\n    initialValues: initialValues(),\n    validationSchema: Yup.object(validationSchema()),\n    onSubmit: async (formData) => {\n      setLoading(true);\n      const response = await updateEmailApi(user.id, formData.email, logout);\n      if (!response || response?.statusCode === 400) {\n        toast.error(\"Error al actualizar el email\");\n      } else {\n        setReloadUser(true);\n        toast.success(\"Email acutalizado\");\n        formik.handleReset();\n      }\n      setLoading(false);\n    },\n  });\n\n  return (\n    <div className=\"change-email-form\">\n      <h4>\n        Cambia tu e-mail <span>(Tu e-mail actual: {user.email})</span>\n      </h4>\n\n      <Form onSubmit={formik.handleSubmit}>\n        <Form.Group widths=\"equal\">\n          <Form.Input\n            name=\"email\"\n            placeholder=\"Tu nuevo e-mail\"\n            onChange={formik.handleChange}\n            value={formik.values.email}\n            error={formik.errors.email}\n          />\n          <Form.Input\n            name=\"repeatEmail\"\n            placeholder=\"Confirma tu nuevo e-mail\"\n            onChange={formik.handleChange}\n            value={formik.values.repeatEmail}\n            error={formik.errors.repeatEmail}\n          />\n        </Form.Group>\n        <Button className=\"submit\" loading={loading}>\n          Actualizar\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nfunction initialValues() {\n  return {\n    email: \"\",\n    repeatEmail: \"\",\n  };\n}\n\nfunction validationSchema() {\n  return {\n    email: Yup.string()\n      .email(true)\n      .required(true)\n      .oneOf([Yup.ref(\"repeatEmail\")], true),\n    repeatEmail: Yup.string()\n      .email(true)\n      .required(true)\n      .oneOf([Yup.ref(\"email\")], true),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}